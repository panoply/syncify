<!-- @prettify-ignore --->
<script>
// src/embed.ts
function assets(dom) {
  dom.querySelectorAll("link[data-syncify-live]").forEach((node) => {
    const href = node.getAttribute("href");
    const name = href.substring(href.lastIndexOf("/"));
    node.setAttribute("href", `http://localhost:3000${name}`);
  });
  dom.querySelectorAll("script[data-syncify-live]").forEach((node) => {
    const make = dom.createElement("script");
    const href = node.getAttribute("src");

    for (const attr of Array.from(node.attributes)) {
      if (attr.nodeName !== "src")
        make.setAttribute(attr.nodeName, attr.nodeValue);
    }
     node.remove(true)

     const file = href.lastIndexOf(".js")
     const time =  new Date().getTime()

    const src = `http://localhost:3000${href.substring(href.lastIndexOf("/"), file + 3)}?v=${time}`;
    make.src = src;
    console.log(node, make)

    setTimeout(() => {
      dom.head.appendChild(make)
    }, 10)

  });
  return dom;
}
function request(key) {
  return new Promise(function(resolve, reject) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", key);
    xhr.setRequestHeader("X-Syncify-Reload", "true");
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    xhr.onload = function() {
      resolve(xhr.responseText);
    };
    xhr.onerror = function() {
      reject(this.statusText);
    };
    xhr.send();
  });
}
(() => {
  const socket = new WebSocket("ws://localhost:8090/ws");
  socket.onmessage = function(x) {
    if (x.data === "reload") {
      return window.top.location.reload();
    } else if (x.data === "replace") {
      return request(window.location.href).then((doc) => {
        const dom = new DOMParser().parseFromString(doc, "text/html");
        const newDom = assets(dom);
        document.documentElement.innerHTML = newDom.documentElement.innerHTML;
      });
    } else if (x.data === "assets") {
      console.log('ASSETS')
      return assets(document);
    }
  };
})();


</script>
