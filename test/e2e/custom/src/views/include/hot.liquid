<script>
  console.log('SYNCIFY HOT RELOADS')
  window.syncify = {
    server: 3000,
    socket: 8089
  };

"use strict";
(() => {
  // src/hot/embed.ts
  function syncifyAssets(dom) {
    dom.querySelectorAll("link[data-syncify-live]").forEach((node) => {
      const href = node.getAttribute("href");
      const name = href.substring(href.lastIndexOf("/"));
      node.setAttribute("href", `http://localhost:${window.syncify.server}${name}`);
    });
    dom.querySelectorAll("script[data-syncify-live]").forEach((node) => {
      const make = dom.createElement("script");
      const href = node.getAttribute("src");
      const link = href.substring(href.lastIndexOf("/"), href.lastIndexOf('v=')) + Date.now()
      const src = `http://localhost:${window.syncify.server}${link}`;
      make.src = src;
      for (const attr of Array.from(node.attributes)) {
        if (attr.nodeName !== "src")
          make.setAttribute(attr.nodeName, attr.nodeValue);
      }
      console.log(node)
      dom.head.removeChild(node);
      dom.head.appendChild(make);
    });
    return dom;
  }
  function syncifyReq(key) {
    return new Promise(function(resolve, reject) {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", key);
      xhr.setRequestHeader("X-Syncify-Reload", "true");
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhr.onload = () => resolve(xhr.responseText);
      xhr.onerror = () => reject(xhr.statusText);
      xhr.send();
    });
  }
  (() => {
    const syncifySocket = new WebSocket(`ws://localhost:${window.syncify.socket}/ws`);
    syncifySocket.onmessage = function({ data }) {
      if (data === "reload") {
        return window.top.location.reload();
      } else if (data === "replace") {
        return syncifyReq(window.location.href).then((doc) => {
          const dom = new DOMParser().parseFromString(doc, "text/html");
          const newDom = syncifyAssets(dom);
          document.documentElement.innerHTML = newDom.documentElement.innerHTML;
        });
      } else if (data === "assets") {
        return syncifyAssets(document);
      }
    };
  })();
})();



</script>
